#!/usr/bin/env python

from __future__ import absolute_import, print_function

import argparse
from os import path
import sys
import re

APP_DIR = path.abspath(path.join(path.dirname(__file__), '..'))
DEFAULT_CONFIG_FILE = path.relpath(path.join(APP_DIR, 'server.conf'))
sys.path.append(APP_DIR)

from metadata import bottle, routes, Metadata, Profile


bottle.TEMPLATE_PATH.append(path.join(APP_DIR, 'metadata/views'))


def port(value):
    value = int(value)

    if value < 0 or value > 65535:
        raise argparse.ArgumentTypeError(
            "invalid port value: {}: value must be 0-65535".format(value))

    return value


def existing_file(value):
    if not path.isfile(value):
        raise argparse.ArgumentTypeError(
            'file does not exist: {}'.format(value))

    return value


def to_int(value):
    return value if value is None else int(value)


def to_bool(value, default=False):
    if value is None:
        return default

    return value.lower() in ('yes', 'true', 'y', 't', '1')


def parse_profiles(config):
    prog = re.compile('^profile:([^\.]+)\.(.*)$')
    profiles = {}
    region = app.config.get('aws.region', 'us-east-1')
    access_key = app.config.get('aws.access_key')
    secret_key = app.config.get('aws.secret_key')
    mfa_enabled = app.config.get('aws.mfa_enabled')
    mfa_secret = app.config.get('aws.mfa_secret')
    token_duration = app.config.get('metadata.token_duration')
    role_arn = app.config.get('metadata.role_arn')

    for key, value in config.items():
        res = prog.match(key)

        if res:
            profiles.setdefault(res.group(1), {})[res.group(2)] = value

    profiles.setdefault('default', {})

    for profile in profiles.values():
        profile.setdefault('region', region)
        profile.setdefault('access_key', access_key)
        profile.setdefault('secret_key', secret_key)
        profile['token_duration'] = to_int(
            profile.setdefault('token_duration', token_duration))
        profile.setdefault('role_arn', role_arn)
        profile.setdefault('mfa_secret', mfa_secret)
        profile['mfa_enabled'] = to_bool(profile.setdefault(
            'mfa_enabled', mfa_enabled), default=True)

    result = {}
    for name, values in profiles.items():
        try:
            result[name] = Profile(**values)
        except Exception as ex:
            raise Exception("Error loading profile {}".format(name), ex)

    return result

if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--config',
        metavar='FILE',
        type=existing_file,
        help='configuration file (default: {})'.format(DEFAULT_CONFIG_FILE))

    parser.add_argument(
        '--host',
        help=('interface to bind the metadata server to '
              '(default: 169.254.169.254)'))

    parser.add_argument(
        '--port',
        type=port,
        help='port to bind the metadata server to (default: 45000)')

    parser.add_argument(
        '--profile',
        help='name of the profile to load by default')

    args = parser.parse_args()

    app = bottle.default_app()
    app.config.load_config(args.config or DEFAULT_CONFIG_FILE)

    user_config = path.join(path.expanduser('~'), '.aws-mock-metadata/config')

    if path.isfile(user_config):
        app.config.load_config(user_config)

    profile_name = args.profile or\
        app.config.get('metadata.profile', 'default')

    app.config.meta_set(
        'metadata',
        'obj',
        Metadata(parse_profiles(app.config), profile_name))

    app.run(
        host=args.host or app.config.get('metadata.host', '169.254.169.254'),
        port=args.port or int(app.config.get('metadata.port', 45000)))
